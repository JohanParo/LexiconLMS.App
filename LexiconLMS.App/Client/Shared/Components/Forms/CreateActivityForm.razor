@using LexiconLMS.App.Client.Services;

<EditForm EditContext="editContext">

    <h3>Add activity</h3>

    <div class="form-group mb-3">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="Activity.Title" placeholder="Enter title"></InputText>
    </div>
        
    <div class="form-group mb-3">
    <label>Activity type</label>
    <InputSelect class="form-select" @bind-Value="Activity.ActivityTypeId">
            <option selected>-- Select activity type --</option>
            @foreach (var item in ActivityTypes)
            {
                <option value="@item.Id">@item.Type</option>
            }
    </InputSelect>
    </div> 

    <div class="form-group mb-3">
        <label>Course</label>
        <InputSelect 
         Value="Course.Id" 
         ValueChanged="@( async (int selectedId) => await CourseHasChangedAsync(selectedId))"
         ValueExpression="@( () => Course.Id)"
         class="form-select">
            <option selected>-- Select course --</option>
            @foreach (var item in Courses)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </InputSelect>
    </div>

    <div class="form-group mb-3">
        <label>Module</label>
        <InputSelect class="form-select" @bind-Value="Activity.ModuleId">
            <option selected>-- Select module --</option>           
            @foreach (var item in Modules)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </InputSelect>
    </div> 

    <div class="form-group mb-3">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="Activity.Description" placeholder="Enter description"></InputTextArea>
    </div>

    <div class="form-group mb-3">
        <label for="startTime">Start date</label>
        <InputDate class="form-control" @bind-Value="Activity.StartTime" placeholder="Enter start date"></InputDate>
    </div>

    <div class="form-group mb-3">
        <label for="endTime">End date</label>
        <InputDate id="endTime" class="form-control" @bind-Value="Activity.EndTime" placeholder="Enter end date"></InputDate>
    </div>      

    @*  <div class="form-check form-switch mb-3">
    <label for="isPublished" class="form-check-label">Publish now</label>
    <InputCheckbox id="publish" class="form-check-input" @bind-Value="@Course.IsPublished"></InputCheckbox>
    </div>  *@

    @*<div class="form-group mb-3">
        <p>@msg</p>
        <label for="file">Upload up to @SharedVariable.maxAllowedFiles files</label>
        <InputFile class="form-control-file" id="file" OnChange="@OnInputFileChange" multiple accept=".doc, .docx, image/*, .txt, .pdf"></InputFile>
    </div>*@
    @* Add OnChange="OnInputFileChange" or bind-value?*@

    <div class="input-group-append input-group-lg">
        <button type="submit" id="save" class="btn btn-success" @onclick="async () => await OnSave()">Save</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public ActivityDto Activity { get; set; } = new (); 

    private List<ActivityTypeDto> ActivityTypes { get; set; } = new();
    private CourseDto Course { get; set; } = new ();
    private List<CourseDto> Courses { get; set; } = new();
    private List<ModuleDto> Modules { get; set; } = new();
    private EditContext editContext = default!;

    [Inject]
    public LMSClient lmsClient { get; set; } = default!;


    protected override void OnInitialized()
    {
        if (Activity.StartTime == DateTime.MinValue)
        {
            Activity.StartTime = DateTime.Now;
        }
        
        editContext = new EditContext(Activity);
    }

    protected async override Task OnInitializedAsync()
    {
        Courses = (await lmsClient.GetAsync<CourseDto>("api/courses")).ToList();
        ActivityTypes = (await lmsClient.GetAsync<ActivityTypeDto>("api/activitytypes")).ToList();
    }

    public async Task CourseHasChangedAsync(int id)
    {
        Course.Id = id;
        Modules = (await lmsClient.GetAsync<ModuleDto>("api/modules")).Where(m => m.CourseId.Equals(id)).ToList();
        StateHasChanged();
    }        

    public async Task OnSave()
    {
        if (Activity is null)
        {
            throw new ArgumentNullException(nameof(Activity));
        }

        if (Activity.Id == 0)
        {           
            var newActivity = await lmsClient.PostAsync(Activity, "api/activities");            
        }
        else
        {
            var isEdited = await lmsClient.PutAsync(Activity, "api/activities");
        }
    }

}
